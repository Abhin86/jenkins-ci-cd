# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: us-central1-docker.pkg.dev/sigma-lane-425101-p6/flask # TODO: update to Artifact Registry docker repository
  IMAGE: flask

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # environment: production

    # permissions:
    #   contents: 'read'
    #   id-token: 'write'

    steps:
    - name: Checkout
      uses: "actions/checkout@v3"

    # Configure Workload Identity Federation and generate an access token.
    # - id: 'auth'
    #   name: 'Authenticate to Google Cloud'
    #   uses: 'google-github-actions/auth@v1'
    #   with:
    #     token_format: 'access_token'
    #     workload_identity_provider: 'projects/259973560013/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #     service_account: 'admin1@sigma-lane-425101-p6.iam.gserviceaccount.com'

    #Alternative option - authentication via credentials json
    - id: 'auth'
      uses: "google-github-actions/auth@v1"
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # - name: Docker configuration
    #   run: |-
    #     echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        
    # - name: Docker configuration
    #   run: |-
    #     echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v1"

    - name: "Use gcloud CLI"
      run: "gcloud info"

    - name: "Docker auth"
      run: |-
        # gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
    # Build the Docker image
    
    - name: Build
      run: |-
        docker build \
          --tag "$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
         docker push "$REPOSITORY/$IMAGE:$GITHUB_SHA"
  
    # Set up kustomize
    - name: Set up Kubectl and helm
      run: |-
         curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
         chmod 700 get_helm.sh
         ./get_helm.sh
         ls
         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         chmod +x kubectl
         ./kubectl
         ./helm
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        ls
        
